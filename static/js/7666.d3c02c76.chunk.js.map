{"version":3,"file":"static/js/7666.d3c02c76.chunk.js","mappings":"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","sources":["../node_modules/@milkdown/components/src/__internal__/meta.ts","../node_modules/@milkdown/components/src/link-tooltip/slices.ts","../node_modules/@milkdown/components/src/link-tooltip/tooltips.ts","../node_modules/@milkdown/components/src/__internal__/helper.ts","../node_modules/@milkdown/components/src/link-tooltip/preview/preview-component.ts","../node_modules/@milkdown/components/src/link-tooltip/preview/preview-view.ts","../node_modules/@milkdown/components/src/link-tooltip/preview/preview-configure.ts","../node_modules/@milkdown/components/src/link-tooltip/utils.ts","../node_modules/@milkdown/components/src/link-tooltip/edit/edit-component.ts","../node_modules/@milkdown/components/src/link-tooltip/edit/edit-view.ts","../node_modules/@milkdown/components/src/link-tooltip/configure.ts","../node_modules/@milkdown/components/src/link-tooltip/edit/edit-configure.ts","../node_modules/@milkdown/components/src/link-tooltip/index.ts","../node_modules/@milkdown/crepe/src/feature/toolbar/component.ts","../node_modules/@milkdown/crepe/src/feature/toolbar/index.ts"],"sourcesContent":["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import { $ctx } from '@milkdown/utils'\nimport type { Mark } from '@milkdown/prose/model'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\nexport interface LinkToolTipState {\n  mode: 'preview' | 'edit'\n}\n\nconst defaultState: LinkToolTipState = {\n  mode: 'preview',\n}\n\nexport const linkTooltipState = $ctx({ ...defaultState }, 'linkTooltipStateCtx')\n\nwithMeta(linkTooltipState, {\n  displayName: 'State<link-tooltip>',\n  group: 'LinkTooltip',\n})\n\nexport interface LinkTooltipAPI {\n  addLink: (from: number, to: number) => void\n  editLink: (mark: Mark, from: number, to: number) => void\n  removeLink: (from: number, to: number) => void\n}\n\nconst defaultAPI: LinkTooltipAPI = {\n  addLink: () => {},\n  editLink: () => {},\n  removeLink: () => {},\n}\n\nexport const linkTooltipAPI = $ctx({ ...defaultAPI }, 'linkTooltipAPICtx')\n\nwithMeta(linkTooltipState, {\n  displayName: 'API<link-tooltip>',\n  group: 'LinkTooltip',\n})\n\nexport interface LinkTooltipConfig {\n  linkIcon: () => ReturnType<typeof html>\n  editButton: () => ReturnType<typeof html>\n  confirmButton: () => ReturnType<typeof html>\n  removeButton: () => ReturnType<typeof html>\n  onCopyLink: (link: string) => void\n  inputPlaceholder: string\n}\n\nconst defaultConfig: LinkTooltipConfig = {\n  linkIcon: () => '🔗',\n  editButton: () => '✎',\n  removeButton: () => '⌫',\n  confirmButton: () => html`Confirm ⏎`,\n  onCopyLink: () => {},\n  inputPlaceholder: 'Paste link...',\n}\n\nexport const linkTooltipConfig = $ctx(\n  {\n    ...defaultConfig,\n  },\n  'linkTooltipConfigCtx'\n)\n\nwithMeta(linkTooltipState, {\n  displayName: 'Config<link-tooltip>',\n  group: 'LinkTooltip',\n})\n","import { tooltipFactory } from '@milkdown/plugin-tooltip'\nimport { withMeta } from '../__internal__/meta'\n\nexport const linkPreviewTooltip = tooltipFactory('LINK_PREVIEW')\nwithMeta(linkPreviewTooltip[0], {\n  displayName: 'PreviewTooltipSpec<link-tooltip>',\n  group: 'LinkTooltip',\n})\nwithMeta(linkPreviewTooltip[1], {\n  displayName: 'PreviewTooltipPlugin<link-tooltip>',\n  group: 'LinkTooltip',\n})\nexport const linkEditTooltip = tooltipFactory('LINK_EDIT')\nwithMeta(linkEditTooltip[0], {\n  displayName: 'EditTooltipSpec<link-tooltip>',\n  group: 'LinkTooltip',\n})\nwithMeta(linkEditTooltip[1], {\n  displayName: 'EditTooltipPlugin<link-tooltip>',\n  group: 'LinkTooltip',\n})\n","export function defIfNotExists(\n  tagName: string,\n  element: CustomElementConstructor\n) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element) return\n\n  // eslint-disable-next-line no-console\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n","import type { Component } from 'atomico'\nimport { c, html } from 'atomico'\nimport type { LinkTooltipConfig } from '../slices'\n\nexport interface LinkPreviewProps {\n  config: LinkTooltipConfig\n  src: string\n  onEdit: () => void\n  onRemove: () => void\n}\n\nexport const linkPreviewComponent: Component<LinkPreviewProps> = ({\n  config,\n  src,\n  onEdit,\n  onRemove,\n}) => {\n  const onClickEditButton = (e: MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    onEdit?.()\n  }\n\n  const onClickRemoveButton = (e: MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    onRemove?.()\n  }\n\n  const onClickPreview = (e: MouseEvent) => {\n    e.preventDefault()\n    if (navigator.clipboard && src) {\n      navigator.clipboard\n        .writeText(src)\n        .then(() => {\n          config?.onCopyLink(src)\n        })\n        .catch((e) => {\n          throw e\n        })\n    }\n  }\n\n  return html`\n    <host>\n      <div class=\"link-preview\" onmousedown=${onClickPreview}>\n        <span class=\"link-icon\"> ${config?.linkIcon()} </span>\n        <a href=${src} target=\"_blank\" class=\"link-display\">${src}</a>\n        <span class=\"button link-edit-button\" onmousedown=${onClickEditButton}>\n          ${config?.editButton()}\n        </span>\n        <span\n          class=\"button link-remove-button\"\n          onmousedown=${onClickRemoveButton}\n        >\n          ${config?.removeButton()}\n        </span>\n      </div>\n    </host>\n  `\n}\n\nlinkPreviewComponent.props = {\n  config: Object,\n  src: String,\n  onEdit: Function,\n  onRemove: Function,\n}\n\nexport const LinkPreviewElement = c(linkPreviewComponent)\n","import type { PluginView } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\nimport type { Mark } from '@milkdown/prose/model'\nimport { TooltipProvider } from '@milkdown/plugin-tooltip'\nimport type { Ctx, Slice } from '@milkdown/ctx'\nimport type { LinkToolTipState } from '../slices'\nimport { linkTooltipAPI, linkTooltipConfig, linkTooltipState } from '../slices'\nimport { LinkPreviewElement } from './preview-component'\n\nexport class LinkPreviewTooltip implements PluginView {\n  #content = new LinkPreviewElement()\n  #provider: TooltipProvider\n  #slice: Slice<LinkToolTipState> = this.ctx.use(linkTooltipState.key)\n\n  #hovering = false\n\n  constructor(\n    readonly ctx: Ctx,\n    view: EditorView\n  ) {\n    this.#provider = new TooltipProvider({\n      debounce: 0,\n      content: this.#content,\n      shouldShow: () => false,\n    })\n    this.#provider.update(view)\n    this.#slice = ctx.use(linkTooltipState.key)\n    this.#slice.on(this.#onStateChange)\n  }\n\n  #onStateChange = ({ mode }: LinkToolTipState) => {\n    if (mode === 'edit') this.#hide()\n  }\n\n  #onMouseEnter = () => {\n    this.#hovering = true\n  }\n\n  #onMouseLeave = () => {\n    this.#hovering = false\n  }\n\n  #hide = () => {\n    this.#provider.hide()\n    this.#provider.element.removeEventListener('mouseenter', this.#onMouseEnter)\n    this.#provider.element.removeEventListener('mouseleave', this.#onMouseLeave)\n  }\n\n  show = (mark: Mark, from: number, to: number, rect: DOMRect) => {\n    this.#content.config = this.ctx.get(linkTooltipConfig.key)\n    this.#content.src = mark.attrs.href\n    this.#content.onEdit = () => {\n      this.ctx.get(linkTooltipAPI.key).editLink(mark, from, to)\n    }\n    this.#content.onRemove = () => {\n      this.ctx.get(linkTooltipAPI.key).removeLink(from, to)\n      this.#hide()\n    }\n\n    this.#provider.show({\n      getBoundingClientRect: () => rect,\n    })\n    this.#provider.element.addEventListener('mouseenter', this.#onMouseEnter)\n    this.#provider.element.addEventListener('mouseleave', this.#onMouseLeave)\n  }\n\n  hide = () => {\n    if (this.#hovering) return\n\n    this.#hide()\n  }\n\n  update = () => {}\n\n  destroy = () => {\n    this.#slice.off(this.#onStateChange)\n    this.#provider.destroy()\n    this.#content.remove()\n  }\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport debounce from 'lodash.debounce'\nimport type { EditorView } from '@milkdown/prose/view'\nimport { posToDOMRect } from '@milkdown/prose'\nimport { linkTooltipState } from '../slices'\nimport { findMarkPosition, shouldShowPreviewWhenHover } from '../utils'\nimport { linkPreviewTooltip } from '../tooltips'\nimport { defIfNotExists } from '../../__internal__/helper'\nimport { LinkPreviewTooltip } from './preview-view'\nimport { LinkPreviewElement } from './preview-component'\n\ndefIfNotExists('milkdown-link-preview', LinkPreviewElement)\nexport function configureLinkPreviewTooltip(ctx: Ctx) {\n  let linkPreviewTooltipView: LinkPreviewTooltip | null\n\n  const DELAY = 200\n  const onMouseMove = debounce((view: EditorView, event: MouseEvent) => {\n    if (!linkPreviewTooltipView) return\n    if (!view.hasFocus()) return\n\n    const state = ctx.get(linkTooltipState.key)\n    if (state.mode === 'edit') return\n\n    const result = shouldShowPreviewWhenHover(ctx, view, event)\n    if (result) {\n      const position = view.state.doc.resolve(result.pos)\n      const markPosition = findMarkPosition(\n        result.mark,\n        result.node,\n        view.state.doc,\n        position.before(),\n        position.after()\n      )\n      const from = markPosition.start\n      const to = markPosition.end\n      linkPreviewTooltipView.show(\n        result.mark,\n        from,\n        to,\n        posToDOMRect(view, from, to)\n      )\n      return\n    }\n\n    linkPreviewTooltipView.hide()\n  }, DELAY)\n\n  const onMouseLeave = () => {\n    setTimeout(() => {\n      linkPreviewTooltipView?.hide()\n    }, DELAY)\n  }\n\n  ctx.set(linkPreviewTooltip.key, {\n    props: {\n      handleDOMEvents: {\n        mousemove: onMouseMove,\n        mouseleave: onMouseLeave,\n      },\n    },\n    view: (view) => {\n      linkPreviewTooltipView = new LinkPreviewTooltip(ctx, view)\n      return linkPreviewTooltipView\n    },\n  })\n}\n","import type { Mark, Node } from '@milkdown/prose/model'\nimport type { Ctx } from '@milkdown/ctx'\nimport type { EditorView } from '@milkdown/prose/view'\nimport { linkSchema } from '@milkdown/preset-commonmark'\nimport { linkPreviewTooltip } from './tooltips'\n\nexport function findMarkPosition(\n  mark: Mark,\n  node: Node,\n  doc: Node,\n  from: number,\n  to: number\n) {\n  let markPos = { start: -1, end: -1 }\n  doc.nodesBetween(from, to, (n, pos) => {\n    // stop recursive finding if result is found\n    if (markPos.start > -1) return false\n\n    if (markPos.start === -1 && mark.isInSet(n.marks) && node === n) {\n      markPos = {\n        start: pos,\n        end: pos + Math.max(n.textContent.length, 1),\n      }\n    }\n\n    return undefined\n  })\n\n  return markPos\n}\n\nexport function shouldShowPreviewWhenHover(\n  ctx: Ctx,\n  view: EditorView,\n  event: MouseEvent\n) {\n  const $pos = view.posAtCoords({ left: event.clientX, top: event.clientY })\n  if (!$pos) return\n\n  const { pos } = $pos\n  const node = view.state.doc.nodeAt(pos)\n\n  if (!node) return\n\n  const mark = node.marks.find(\n    (mark) => mark.type === linkSchema.mark.type(ctx)\n  )\n  if (!mark) return\n\n  const key = linkPreviewTooltip.pluginKey()\n  if (!key) return\n\n  return { show: true, pos, node, mark }\n}\n","import type { Component } from 'atomico'\nimport { c, html, useEffect, useRef, useState } from 'atomico'\nimport clsx from 'clsx'\nimport type { LinkTooltipConfig } from '../slices'\n\nexport interface LinkEditProps {\n  config: LinkTooltipConfig\n  src: string\n  onConfirm: (href: string) => void\n  onCancel: () => void\n}\n\nexport const linkEditComponent: Component<LinkEditProps> = ({\n  src,\n  onConfirm,\n  onCancel,\n  config,\n}) => {\n  const linkInput = useRef<HTMLInputElement>()\n  const [link, setLink] = useState(src)\n\n  useEffect(() => {\n    setLink(src ?? '')\n  }, [src])\n\n  const onConfirmEdit = () => {\n    onConfirm?.(linkInput.current?.value ?? '')\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    e.stopPropagation()\n    if (e.key === 'Enter') {\n      onConfirm?.(linkInput.current?.value ?? '')\n      e.preventDefault()\n    }\n    if (e.key === 'Escape') {\n      onCancel?.()\n      e.preventDefault()\n    }\n  }\n\n  return html`\n    <host>\n      <div class=\"link-edit\">\n        <input\n          class=\"input-area\"\n          placeholder=${config?.inputPlaceholder}\n          ref=${linkInput}\n          onkeydown=${onKeydown}\n          oninput=${(e: InputEvent) =>\n            setLink((e.target as HTMLInputElement).value)}\n          value=${link}\n        />\n        <span\n          class=${clsx('button confirm', !link && 'hidden')}\n          onclick=${onConfirmEdit}\n        >\n          ${config?.confirmButton()}\n        </span>\n      </div>\n    </host>\n  `\n}\n\nlinkEditComponent.props = {\n  config: Object,\n  src: String,\n  onConfirm: Function,\n  onCancel: Function,\n}\n\nexport const LinkEditElement = c(linkEditComponent)\n","import type { Ctx } from '@milkdown/ctx'\nimport { TextSelection } from '@milkdown/prose/state'\nimport type { PluginView } from '@milkdown/prose/state'\nimport type { Mark } from '@milkdown/prose/model'\nimport type { EditorView } from '@milkdown/prose/view'\nimport { TooltipProvider } from '@milkdown/plugin-tooltip'\nimport { editorViewCtx } from '@milkdown/core'\nimport { linkSchema } from '@milkdown/preset-commonmark'\nimport { posToDOMRect } from '@milkdown/prose'\nimport { linkTooltipConfig, linkTooltipState } from '../slices'\nimport { LinkEditElement } from './edit-component'\n\ninterface Data {\n  from: number\n  to: number\n  mark: Mark | null\n}\n\nconst defaultData: Data = {\n  from: -1,\n  to: -1,\n  mark: null,\n}\n\nexport class LinkEditTooltip implements PluginView {\n  #content = new LinkEditElement()\n  #provider: TooltipProvider\n  #data: Data = { ...defaultData }\n\n  constructor(\n    readonly ctx: Ctx,\n    view: EditorView\n  ) {\n    this.#provider = new TooltipProvider({\n      content: this.#content,\n      debounce: 0,\n      shouldShow: () => false,\n    })\n    this.#provider.onHide = () => {\n      this.#content.update().catch((e) => {\n        throw e\n      })\n      view.dom.focus({ preventScroll: true })\n    }\n    this.#provider.update(view)\n    this.#content.onConfirm = this.#confirmEdit\n    this.#content.onCancel = this.#reset\n  }\n\n  #reset = () => {\n    this.#provider.hide()\n    this.ctx.update(linkTooltipState.key, (state) => ({\n      ...state,\n      mode: 'preview' as const,\n    }))\n    this.#data = { ...defaultData }\n  }\n\n  #confirmEdit = (href: string) => {\n    const view = this.ctx.get(editorViewCtx)\n    const { from, to, mark } = this.#data\n    const type = linkSchema.type(this.ctx)\n    if (mark && mark.attrs.href === href) {\n      this.#reset()\n      return\n    }\n\n    const tr = view.state.tr\n    if (mark) tr.removeMark(from, to, mark)\n\n    tr.addMark(from, to, type.create({ href }))\n    view.dispatch(tr)\n\n    this.#reset()\n  }\n\n  #enterEditMode = (value: string, from: number, to: number) => {\n    const config = this.ctx.get(linkTooltipConfig.key)\n    this.#content.config = config\n    this.#content.src = value\n    this.ctx.update(linkTooltipState.key, (state) => ({\n      ...state,\n      mode: 'edit' as const,\n    }))\n    const view = this.ctx.get(editorViewCtx)\n    // this.#setRect(posToDOMRect(view, from, to))\n    view.dispatch(\n      view.state.tr.setSelection(TextSelection.create(view.state.doc, from, to))\n    )\n    this.#provider.show({\n      getBoundingClientRect: () => posToDOMRect(view, from, to),\n    })\n    requestAnimationFrame(() => {\n      this.#content.querySelector('input')?.focus()\n    })\n  }\n\n  update = (view: EditorView) => {\n    const { state } = view\n    const { selection } = state\n    if (!(selection instanceof TextSelection)) return\n    const { from, to } = selection\n    if (from === this.#data.from && to === this.#data.to) return\n\n    this.#reset()\n  }\n\n  destroy = () => {\n    this.#provider.destroy()\n    this.#content.remove()\n  }\n\n  addLink = (from: number, to: number) => {\n    this.#data = {\n      from,\n      to,\n      mark: null,\n    }\n    this.#enterEditMode('', from, to)\n  }\n\n  editLink = (mark: Mark, from: number, to: number) => {\n    this.#data = {\n      from,\n      to,\n      mark,\n    }\n    this.#enterEditMode(mark.attrs.href, from, to)\n  }\n\n  removeLink = (from: number, to: number) => {\n    const view = this.ctx.get(editorViewCtx)\n\n    const tr = view.state.tr\n    tr.removeMark(from, to, linkSchema.type(this.ctx))\n    view.dispatch(tr)\n\n    this.#reset()\n  }\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport { configureLinkPreviewTooltip } from './preview/preview-configure'\nimport { configureLinkEditTooltip } from './edit/edit-configure'\n\nexport function configureLinkTooltip(ctx: Ctx) {\n  configureLinkPreviewTooltip(ctx)\n  configureLinkEditTooltip(ctx)\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport { linkTooltipAPI } from '../slices'\nimport { linkEditTooltip } from '../tooltips'\nimport { defIfNotExists } from '../../__internal__/helper'\nimport { LinkEditElement } from './edit-component'\nimport { LinkEditTooltip } from './edit-view'\n\ndefIfNotExists('milkdown-link-edit', LinkEditElement)\nexport function configureLinkEditTooltip(ctx: Ctx) {\n  let linkEditTooltipView: LinkEditTooltip | null\n\n  ctx.update(linkTooltipAPI.key, (api) => ({\n    ...api,\n    addLink: (from, to) => {\n      linkEditTooltipView?.addLink(from, to)\n    },\n    editLink: (mark, from, to) => {\n      linkEditTooltipView?.editLink(mark, from, to)\n    },\n    removeLink: (from, to) => {\n      linkEditTooltipView?.removeLink(from, to)\n    },\n  }))\n\n  ctx.set(linkEditTooltip.key, {\n    view: (view) => {\n      linkEditTooltipView = new LinkEditTooltip(ctx, view)\n      return linkEditTooltipView\n    },\n  })\n}\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { linkTooltipAPI, linkTooltipConfig, linkTooltipState } from './slices'\nimport { linkEditTooltip, linkPreviewTooltip } from './tooltips'\n\nexport * from './slices'\nexport * from './configure'\nexport * from './tooltips'\n\nexport const linkTooltipPlugin: MilkdownPlugin[] = [\n  linkTooltipState,\n  linkTooltipAPI,\n  linkTooltipConfig,\n  linkPreviewTooltip,\n  linkEditTooltip,\n].flat()\n","import type { Component } from 'atomico'\nimport { c, html, useEffect, useUpdate } from 'atomico'\nimport type { Ctx } from '@milkdown/kit/ctx'\nimport { commandsCtx, editorViewCtx } from '@milkdown/kit/core'\nimport {\n  emphasisSchema,\n  inlineCodeSchema,\n  linkSchema,\n  strongSchema,\n  toggleEmphasisCommand,\n  toggleInlineCodeCommand,\n  toggleStrongCommand,\n} from '@milkdown/kit/preset/commonmark'\nimport type { MarkType, Node, NodeType } from '@milkdown/kit/prose/model'\nimport type { Selection } from '@milkdown/kit/prose/state'\nimport clsx from 'clsx'\nimport { linkTooltipAPI } from '@milkdown/kit/component/link-tooltip'\nimport {\n  strikethroughSchema,\n  toggleStrikethroughCommand,\n} from '@milkdown/kit/preset/gfm'\nimport {\n  boldIcon,\n  codeIcon,\n  italicIcon,\n  linkIcon,\n  strikethroughIcon,\n  functionsIcon,\n} from '../../icons'\nimport type { ToolbarFeatureConfig } from './index'\nimport { NodeSelection, TextSelection } from '@milkdown/kit/prose/state'\nimport { mathInlineSchema } from '../latex/inline-latex'\nimport { FeaturesCtx } from '../../core/slice'\nimport { CrepeFeature } from '../..'\n\nexport interface ToolbarProps {\n  ctx: Ctx\n  hide: () => void\n  show: boolean\n  selection: Selection\n  config?: ToolbarFeatureConfig\n}\n\nexport const toolbarComponent: Component<ToolbarProps> = ({\n  ctx,\n  hide,\n  show,\n  config,\n  selection,\n}) => {\n  const update = useUpdate()\n  useEffect(() => {\n    update()\n  }, [show])\n\n  const onClick = (fn: (ctx: Ctx) => void) => (e: MouseEvent) => {\n    e.preventDefault()\n    ctx && fn(ctx)\n    update()\n  }\n\n  const isActive = (mark: MarkType) => {\n    if (!ctx || !selection) return false\n    const view = ctx.get(editorViewCtx)\n    const {\n      state: { doc },\n    } = view\n    return doc.rangeHasMark(selection.from, selection.to, mark)\n  }\n\n  const containsNode = (node: NodeType) => {\n    if (!ctx || !selection) return false\n    const view = ctx.get(editorViewCtx)\n    const {\n      state: { doc },\n    } = view\n    if (selection instanceof NodeSelection) {\n      return selection.node.type === node\n    }\n\n    const { from, to } = selection\n\n    let hasNode = false\n    doc.nodesBetween(from, to, (n) => {\n      if (n.type === node) {\n        hasNode = true\n        return false\n      }\n      return true\n    })\n\n    return hasNode\n  }\n\n  const flags = ctx?.get(FeaturesCtx)\n  const isLatexEnabled = flags?.includes(CrepeFeature.Latex)\n\n  const toggleLatex = (ctx: Ctx) => {\n    const hasLatex = containsNode(mathInlineSchema.type(ctx))\n    const view = ctx.get(editorViewCtx)\n    const { selection, doc, tr } = view.state\n    if (!hasLatex) {\n      const text = doc.textBetween(selection.from, selection.to)\n      let _tr = tr.replaceSelectionWith(\n        mathInlineSchema.type(ctx).create({\n          value: text,\n        })\n      )\n      view.dispatch(\n        _tr.setSelection(NodeSelection.create(_tr.doc, selection.from))\n      )\n      return\n    }\n\n    const { from, to } = selection\n    let pos = -1\n    let node: Node | null = null\n    doc.nodesBetween(from, to, (n, p) => {\n      if (node) return false\n      if (n.type === mathInlineSchema.type(ctx)) {\n        pos = p\n        node = n\n        return false\n      }\n      return true\n    })\n    if (!node || pos < 0) return\n\n    let _tr = tr.delete(pos, pos + 1)\n    const content = (node as Node).attrs.value\n    _tr = _tr.insertText(content, pos)\n    view.dispatch(\n      _tr.setSelection(\n        TextSelection.create(_tr.doc, from, to + content.length - 1)\n      )\n    )\n  }\n\n  return html`<host>\n    <button\n      type=\"button\"\n      class=${clsx(\n        'toolbar-item',\n        ctx && isActive(strongSchema.type(ctx)) && 'active'\n      )}\n      onmousedown=${onClick((ctx) => {\n        const commands = ctx.get(commandsCtx)\n        commands.call(toggleStrongCommand.key)\n      })}\n    >\n      ${config?.boldIcon?.() ?? boldIcon}\n    </button>\n    <button\n      type=\"button\"\n      class=${clsx(\n        'toolbar-item',\n        ctx && isActive(emphasisSchema.type(ctx)) && 'active'\n      )}\n      onmousedown=${onClick((ctx) => {\n        const commands = ctx.get(commandsCtx)\n        commands.call(toggleEmphasisCommand.key)\n      })}\n    >\n      ${config?.italicIcon?.() ?? italicIcon}\n    </button>\n    <button\n      type=\"button\"\n      class=${clsx(\n        'toolbar-item',\n        ctx && isActive(strikethroughSchema.type(ctx)) && 'active'\n      )}\n      onmousedown=${onClick((ctx) => {\n        const commands = ctx.get(commandsCtx)\n        commands.call(toggleStrikethroughCommand.key)\n      })}\n    >\n      ${config?.strikethroughIcon?.() ?? strikethroughIcon}\n    </button>\n    <div class=\"divider\"></div>\n    <button\n      type=\"button\"\n      class=${clsx(\n        'toolbar-item',\n        ctx && isActive(inlineCodeSchema.type(ctx)) && 'active'\n      )}\n      onmousedown=${onClick((ctx) => {\n        const commands = ctx.get(commandsCtx)\n        commands.call(toggleInlineCodeCommand.key)\n      })}\n    >\n      ${config?.codeIcon?.() ?? codeIcon}\n    </button>\n    ${isLatexEnabled &&\n    html`<button\n      type=\"button\"\n      class=${clsx(\n        'toolbar-item',\n        ctx && containsNode(mathInlineSchema.type(ctx)) && 'active'\n      )}\n      onmousedown=${onClick(toggleLatex)}\n    >\n      ${config?.latexIcon?.() ?? functionsIcon}\n    </button>`}\n    <button\n      type=\"button\"\n      class=${clsx(\n        'toolbar-item',\n        ctx && isActive(linkSchema.type(ctx)) && 'active'\n      )}\n      onmousedown=${onClick((ctx) => {\n        const view = ctx.get(editorViewCtx)\n        const { selection } = view.state\n\n        if (isActive(linkSchema.type(ctx))) {\n          ctx.get(linkTooltipAPI.key).removeLink(selection.from, selection.to)\n          return\n        }\n\n        ctx.get(linkTooltipAPI.key).addLink(selection.from, selection.to)\n        hide?.()\n      })}\n    >\n      ${config?.linkIcon?.() ?? linkIcon}\n    </button>\n  </host>`\n}\n\ntoolbarComponent.props = {\n  ctx: Object,\n  hide: Function,\n  show: Boolean,\n  config: Object,\n  selection: Object,\n}\n\nexport const ToolbarElement = c(toolbarComponent)\n","import { TooltipProvider, tooltipFactory } from '@milkdown/kit/plugin/tooltip'\nimport type { EditorState, PluginView } from '@milkdown/kit/prose/state'\nimport { TextSelection } from '@milkdown/kit/prose/state'\nimport type { Ctx } from '@milkdown/kit/ctx'\nimport type { EditorView } from '@milkdown/kit/prose/view'\nimport type { AtomicoThis } from 'atomico/types/dom'\nimport type { DefineFeature, Icon } from '../shared'\nimport { defIfNotExists } from '../../utils'\nimport type { ToolbarProps } from './component'\nimport { ToolbarElement } from './component'\n\ninterface ToolbarConfig {\n  boldIcon: Icon\n  codeIcon: Icon\n  italicIcon: Icon\n  linkIcon: Icon\n  strikethroughIcon: Icon\n  latexIcon: Icon\n}\n\nexport type ToolbarFeatureConfig = Partial<ToolbarConfig>\n\nconst toolbar = tooltipFactory('CREPE_TOOLBAR')\n\nclass ToolbarView implements PluginView {\n  #tooltipProvider: TooltipProvider\n  #content: AtomicoThis<ToolbarProps>\n  constructor(ctx: Ctx, view: EditorView, config?: ToolbarFeatureConfig) {\n    const content = new ToolbarElement()\n    this.#content = content\n    this.#content.ctx = ctx\n    this.#content.hide = this.hide\n    this.#content.config = config\n    this.#content.selection = view.state.selection\n    this.#tooltipProvider = new TooltipProvider({\n      content: this.#content,\n      debounce: 20,\n      offset: 10,\n      shouldShow(view: EditorView) {\n        const { doc, selection } = view.state\n        const { empty, from, to } = selection\n\n        const isEmptyTextBlock =\n          !doc.textBetween(from, to).length &&\n          selection instanceof TextSelection\n\n        const isNotTextBlock = !(selection instanceof TextSelection)\n\n        const activeElement = (view.dom.getRootNode() as ShadowRoot | Document)\n          .activeElement\n        const isTooltipChildren = content.contains(activeElement)\n\n        const notHasFocus = !view.hasFocus() && !isTooltipChildren\n\n        const isReadonly = !view.editable\n\n        if (\n          notHasFocus ||\n          isNotTextBlock ||\n          empty ||\n          isEmptyTextBlock ||\n          isReadonly\n        )\n          return false\n\n        return true\n      },\n    })\n    this.#tooltipProvider.onShow = () => {\n      this.#content.show = true\n    }\n    this.#tooltipProvider.onHide = () => {\n      this.#content.show = false\n    }\n    this.update(view)\n  }\n\n  update = (view: EditorView, prevState?: EditorState) => {\n    this.#tooltipProvider.update(view, prevState)\n    this.#content.selection = view.state.selection\n  }\n\n  destroy = () => {\n    this.#tooltipProvider.destroy()\n    this.#content.remove()\n  }\n\n  hide = () => {\n    this.#tooltipProvider.hide()\n  }\n}\n\ndefIfNotExists('milkdown-toolbar', ToolbarElement)\nexport const defineFeature: DefineFeature<ToolbarFeatureConfig> = (\n  editor,\n  config\n) => {\n  editor\n    .config((ctx) => {\n      ctx.set(toolbar.key, {\n        view: (view) => new ToolbarView(ctx, view, config),\n      })\n    })\n    .use(toolbar)\n}\n"],"names":["withMeta","plugin","meta","Object","assign","__spreadValues$3","package","linkTooltipState","$ctx","__spreadValues$2","mode","displayName","group","linkTooltipAPI","addLink","editLink","removeLink","defaultConfig","linkIcon","editButton","removeButton","confirmButton","html","onCopyLink","inputPlaceholder","linkTooltipConfig","linkPreviewTooltip","tooltipFactory","linkEditTooltip","defIfNotExists","tagName","element","current","customElements","get","console","warn","define","linkPreviewComponent","_ref","config","src","onEdit","onRemove","e","preventDefault","navigator","clipboard","writeText","then","catch","e2","stopPropagation","props","String","Function","LinkPreviewElement","c","_content$1","_provider$1","_slice","_hovering","_onStateChange","_onMouseEnter","_onMouseLeave","_hide","LinkPreviewTooltip","constructor","ctx","view","__privateAdd$1","this","use","key","_ref2","__privateGet$1","call","__privateSet$1","hide","removeEventListener","show","mark","from","to","rect","attrs","href","getBoundingClientRect","addEventListener","update","destroy","off","remove","TooltipProvider","debounce","content","shouldShow","on","configureLinkPreviewTooltip","linkPreviewTooltipView","onMouseMove","event","hasFocus","result","$pos","posAtCoords","left","clientX","top","clientY","pos","node","state","doc","nodeAt","marks","find","mark2","type","linkSchema","pluginKey","shouldShowPreviewWhenHover","position","resolve","markPosition","markPos","start","end","nodesBetween","n","isInSet","Math","max","textContent","length","findMarkPosition","before","after","posToDOMRect","set","handleDOMEvents","mousemove","mouseleave","onMouseLeave","setTimeout","WeakMap","linkEditComponent","_ref3","onConfirm","onCancel","linkInput","useRef","link","setLink","useState","useEffect","_a","_b","value","target","clsx","onConfirmEdit","LinkEditElement","_content","_provider","_data","_reset","_confirmEdit","_enterEditMode","defaultData","LinkEditTooltip","__privateAdd","__spreadValues$1","__privateGet","__spreadProps$1","__privateSet","editorViewCtx","tr","removeMark","addMark","create","dispatch","setSelection","TextSelection","requestAnimationFrame","querySelector","focus","selection","onHide","dom","preventScroll","configureLinkTooltip","linkEditTooltipView","api","__spreadProps","__spreadValues","configureLinkEditTooltip","linkTooltipPlugin","flat","toolbarComponent","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","useUpdate","onClick","fn","isActive","rangeHasMark","containsNode","NodeSelection","hasNode","flags","FeaturesCtx","isLatexEnabled","includes","CrepeFeature","Latex","strongSchema","ctx2","commandsCtx","toggleStrongCommand","boldIcon","emphasisSchema","toggleEmphasisCommand","italicIcon","strikethroughSchema","toggleStrikethroughCommand","strikethroughIcon","inlineCodeSchema","toggleInlineCodeCommand","codeIcon","mathInlineSchema","hasLatex","selection2","text","textBetween","_tr2","replaceSelectionWith","p","_tr","delete","insertText","latexIcon","functionsIcon","Boolean","ToolbarElement","_tooltipProvider","toolbar","ToolbarView","prevState","offset","view2","empty","isEmptyTextBlock","isNotTextBlock","activeElement","getRootNode","isTooltipChildren","contains","notHasFocus","isReadonly","editable","onShow","defineFeature","editor"],"sourceRoot":""}