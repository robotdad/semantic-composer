{"version":3,"file":"static/js/7698.63764591.chunk.js","mappings":"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","sources":["../node_modules/@milkdown/components/src/__internal__/meta.ts","../node_modules/@milkdown/components/src/list-item-block/component.ts","../node_modules/@milkdown/components/src/list-item-block/config.ts","../node_modules/@milkdown/components/src/__internal__/helper.ts","../node_modules/@milkdown/components/src/list-item-block/view.ts","../node_modules/@milkdown/components/src/list-item-block/index.ts","../node_modules/@milkdown/crepe/src/feature/list-item/index.ts"],"sourcesContent":["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import type { Component } from 'atomico'\nimport { c, html, useHost, useLayoutEffect, useRef } from 'atomico'\nimport type { ListItemBlockConfig } from './config'\n\ninterface Attrs {\n  label: string\n  checked: boolean\n  listType: string\n}\n\nexport type ListItemComponentProps = Attrs & {\n  config: ListItemBlockConfig\n  readonly: boolean\n  selected: boolean\n  setAttr: <T extends keyof Attrs>(attr: T, value: Attrs[T]) => void\n  onMount: () => void\n}\n\nexport const listItemComponent: Component<ListItemComponentProps> = ({\n  selected,\n  label = '',\n  listType = '',\n  checked,\n  onMount,\n  setAttr,\n  config,\n  readonly,\n}) => {\n  const host = useHost()\n  const contentWrapperRef = useRef<HTMLDivElement>()\n\n  useLayoutEffect(() => {\n    const current = contentWrapperRef.current\n    if (!current) return\n\n    const contentDOM = host.current.querySelector('[data-content-dom]')\n\n    if (contentDOM) {\n      current.appendChild(contentDOM)\n      onMount?.()\n    }\n  }, [])\n\n  const onClickLabel = () => {\n    if (checked == null) return\n\n    setAttr?.('checked', !checked)\n  }\n\n  const labelProps = {\n    label,\n    listType,\n    checked,\n    readonly,\n  }\n\n  return html`<host class=${selected && 'ProseMirror-selectednode'}>\n    <li class=\"list-item\">\n      <div\n        class=\"label-wrapper\"\n        onclick=${onClickLabel}\n        contenteditable=\"false\"\n      >\n        ${config?.renderLabel(labelProps)}\n      </div>\n      <div class=\"children\" ref=${contentWrapperRef}></div>\n    </li>\n  </host>`\n}\n\nlistItemComponent.props = {\n  label: String,\n  checked: Boolean,\n  readonly: Boolean,\n  listType: String,\n  config: Object,\n  selected: Boolean,\n  setAttr: Function,\n  onMount: Function,\n}\n\nexport const ListItemElement = c(listItemComponent)\n","import { $ctx } from '@milkdown/utils'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\ninterface RenderLabelProps {\n  label: string\n  listType: string\n  readonly?: boolean\n  checked?: boolean\n}\n\nexport interface ListItemBlockConfig {\n  renderLabel: (props: RenderLabelProps) => void\n}\n\nexport const defaultListItemBlockConfig: ListItemBlockConfig = {\n  renderLabel: ({ label, listType, checked, readonly }: RenderLabelProps) => {\n    if (checked == null)\n      return html`<span class=\"label\"\n        >${listType === 'bullet' ? 'â¦¿' : label}</span\n      >`\n\n    return html`<input\n      disabled=${readonly}\n      class=\"label\"\n      type=\"checkbox\"\n      checked=${checked}\n    />`\n  },\n}\n\nexport const listItemBlockConfig = $ctx(\n  defaultListItemBlockConfig,\n  'listItemBlockConfigCtx'\n)\n\nwithMeta(listItemBlockConfig, {\n  displayName: 'Config<list-item-block>',\n  group: 'ListItemBlock',\n})\n","export function defIfNotExists(\n  tagName: string,\n  element: CustomElementConstructor\n) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element) return\n\n  // eslint-disable-next-line no-console\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n","import { $view } from '@milkdown/utils'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport { TextSelection } from '@milkdown/prose/state'\nimport type { Node } from '@milkdown/prose/model'\nimport { listItemSchema } from '@milkdown/preset-commonmark'\nimport { withMeta } from '../__internal__/meta'\nimport { defIfNotExists } from '../__internal__/helper'\nimport type { ListItemComponentProps } from './component'\nimport { ListItemElement } from './component'\nimport { listItemBlockConfig } from './config'\n\ndefIfNotExists('milkdown-list-item-block', ListItemElement)\nexport const listItemBlockView = $view(\n  listItemSchema.node,\n  (ctx): NodeViewConstructor => {\n    return (initialNode, view, getPos) => {\n      const dom = document.createElement(\n        'milkdown-list-item-block'\n      ) as HTMLElement & ListItemComponentProps\n      const contentDOM = document.createElement('div')\n      contentDOM.setAttribute('data-content-dom', 'true')\n      contentDOM.classList.add('content-dom')\n      const config = ctx.get(listItemBlockConfig.key)\n      const bindAttrs = (node: Node) => {\n        dom.listType = node.attrs.listType\n        dom.label = node.attrs.label\n        dom.checked = node.attrs.checked\n\n        dom.readonly = !view.editable\n      }\n\n      bindAttrs(initialNode)\n      dom.appendChild(contentDOM)\n      dom.selected = false\n      dom.setAttr = (attr, value) => {\n        const pos = getPos()\n        if (pos == null) return\n\n        view.dispatch(view.state.tr.setNodeAttribute(pos, attr, value))\n      }\n      dom.onMount = () => {\n        const { anchor, head } = view.state.selection\n        if (view.hasFocus()) {\n          setTimeout(() => {\n            const anchorPos = view.state.doc.resolve(anchor)\n            const headPos = view.state.doc.resolve(head)\n            view.dispatch(\n              view.state.tr.setSelection(new TextSelection(anchorPos, headPos))\n            )\n          })\n        }\n      }\n      let node = initialNode\n      dom.config = config\n      return {\n        dom,\n        contentDOM,\n        update: (updatedNode) => {\n          if (updatedNode.type !== initialNode.type) return false\n\n          if (\n            updatedNode.sameMarkup(node) &&\n            updatedNode.content.eq(node.content)\n          )\n            return true\n\n          node = updatedNode\n          bindAttrs(updatedNode)\n          return true\n        },\n        ignoreMutation: (mutation) => {\n          if (!dom || !contentDOM) return true\n\n          if ((mutation.type as unknown) === 'selection') return false\n\n          if (contentDOM === mutation.target && mutation.type === 'attributes')\n            return true\n\n          if (contentDOM.contains(mutation.target)) return false\n\n          return true\n        },\n        selectNode: () => {\n          dom.selected = true\n        },\n        deselectNode: () => {\n          dom.selected = false\n        },\n        destroy: () => {\n          dom.remove()\n          contentDOM.remove()\n        },\n      }\n    }\n  }\n)\n\nwithMeta(listItemBlockView, {\n  displayName: 'NodeView<list-item-block>',\n  group: 'ListItemBlock',\n})\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { listItemBlockView } from './view'\nimport { listItemBlockConfig } from './config'\n\nexport * from './component'\nexport * from './config'\nexport * from './view'\n\nexport const listItemBlockComponent: MilkdownPlugin[] = [\n  listItemBlockConfig,\n  listItemBlockView,\n]\n","import type { Ctx } from '@milkdown/kit/ctx'\nimport {\n  listItemBlockComponent,\n  listItemBlockConfig,\n} from '@milkdown/kit/component/list-item-block'\nimport { html } from 'atomico'\nimport clsx from 'clsx'\nimport type { DefineFeature, Icon } from '../shared'\nimport {\n  bulletIcon,\n  checkBoxCheckedIcon,\n  checkBoxUncheckedIcon,\n} from '../../icons'\n\nexport interface ListItemConfig {\n  bulletIcon: Icon\n  checkBoxCheckedIcon: Icon\n  checkBoxUncheckedIcon: Icon\n}\n\nexport type ListItemFeatureConfig = Partial<ListItemConfig>\n\nfunction configureListItem(ctx: Ctx, config?: ListItemFeatureConfig) {\n  ctx.set(listItemBlockConfig.key, {\n    renderLabel: ({ label, listType, checked, readonly }) => {\n      if (checked == null) {\n        if (listType === 'bullet')\n          return html`<span class=\"label\"\n            >${config?.bulletIcon?.() ?? bulletIcon}</span\n          >`\n\n        return html`<span class=\"label\">${label}</span>`\n      }\n\n      if (checked)\n        return html`<span\n          class=${clsx('label checkbox', readonly && 'readonly')}\n          >${config?.checkBoxCheckedIcon?.() ?? checkBoxCheckedIcon}</span\n        >`\n\n      return html`<span class=${clsx('label checkbox', readonly && 'readonly')}\n        >${config?.checkBoxUncheckedIcon?.() ?? checkBoxUncheckedIcon}</span\n      >`\n    },\n  })\n}\n\nexport const defineFeature: DefineFeature<ListItemFeatureConfig> = (\n  editor,\n  config\n) => {\n  editor\n    .config((ctx) => configureListItem(ctx, config))\n    .use(listItemBlockComponent)\n}\n"],"names":["withMeta","plugin","meta","Object","assign","__spreadValues","package","listItemComponent","_ref","selected","label","listType","checked","onMount","setAttr","config","readonly","host","useHost","contentWrapperRef","useRef","useLayoutEffect","current","contentDOM","querySelector","appendChild","labelProps","html","onClickLabel","renderLabel","props","String","Boolean","Function","ListItemElement","c","defaultListItemBlockConfig","_ref2","listItemBlockConfig","$ctx","displayName","group","tagName","element","customElements","get","console","warn","define","defIfNotExists","listItemBlockView","$view","listItemSchema","node","ctx","initialNode","view","getPos","dom","document","createElement","setAttribute","classList","add","key","bindAttrs","node2","attrs","editable","attr","value","pos","dispatch","state","tr","setNodeAttribute","anchor","head","selection","hasFocus","setTimeout","anchorPos","doc","resolve","headPos","setSelection","TextSelection","update","updatedNode","type","sameMarkup","content","eq","ignoreMutation","mutation","target","contains","selectNode","deselectNode","destroy","remove","listItemBlockComponent","defineFeature","editor","set","_a","_b","_c","_d","_e","_f","bulletIcon","call","clsx","checkBoxCheckedIcon","checkBoxUncheckedIcon","configureListItem","use"],"sourceRoot":""}