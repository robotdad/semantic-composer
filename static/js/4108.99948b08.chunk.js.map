{"version":3,"file":"static/js/4108.99948b08.chunk.js","mappings":"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","sources":["../node_modules/@milkdown/components/src/__internal__/meta.ts","../node_modules/@milkdown/components/src/image-block/schema.ts","../node_modules/@milkdown/components/src/image-block/remark-plugin.ts","../node_modules/@milkdown/components/src/image-block/config.ts","../node_modules/@milkdown/components/src/image-block/view/component.ts","../node_modules/@milkdown/components/src/image-block/view/event.ts","../node_modules/@milkdown/components/src/__internal__/helper.ts","../node_modules/@milkdown/components/src/image-block/view/index.ts","../node_modules/@milkdown/components/src/image-block/index.ts","../node_modules/@milkdown/components/src/image-inline/config.ts","../node_modules/@milkdown/components/src/image-inline/component.ts","../node_modules/@milkdown/components/src/image-inline/view.ts","../node_modules/@milkdown/components/src/image-inline/index.ts","../node_modules/@milkdown/crepe/src/feature/image-block/index.ts"],"sourcesContent":["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import { $nodeSchema } from '@milkdown/utils'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { withMeta } from '../__internal__/meta'\n\nexport const IMAGE_DATA_TYPE = 'image-block'\n\nexport const imageBlockSchema = $nodeSchema('image-block', () => {\n  return {\n    inline: false,\n    group: 'block',\n    selectable: true,\n    draggable: true,\n    isolating: true,\n    marks: '',\n    atom: true,\n    priority: 100,\n    attrs: {\n      src: { default: '' },\n      caption: { default: '' },\n      ratio: { default: 1 },\n    },\n    parseDOM: [\n      {\n        tag: `img[data-type=\"${IMAGE_DATA_TYPE}\"]`,\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement)) throw expectDomTypeError(dom)\n\n          return {\n            src: dom.getAttribute('src') || '',\n            caption: dom.getAttribute('caption') || '',\n            ratio: Number(dom.getAttribute('ratio') ?? 1),\n          }\n        },\n      },\n    ],\n    toDOM: (node) => ['img', { 'data-type': IMAGE_DATA_TYPE, ...node.attrs }],\n    parseMarkdown: {\n      match: ({ type }) => type === 'image-block',\n      runner: (state, node, type) => {\n        const src = node.url as string\n        const caption = node.title as string\n        let ratio = Number((node.alt as string) || 1)\n        if (Number.isNaN(ratio) || ratio === 0) ratio = 1\n\n        state.addNode(type, {\n          src,\n          caption,\n          ratio,\n        })\n      },\n    },\n    toMarkdown: {\n      match: (node) => node.type.name === 'image-block',\n      runner: (state, node) => {\n        state.openNode('paragraph')\n        state.addNode('image', undefined, undefined, {\n          title: node.attrs.caption,\n          url: node.attrs.src,\n          alt: `${Number.parseFloat(node.attrs.ratio).toFixed(2)}`,\n        })\n        state.closeNode()\n      },\n    },\n  }\n})\n\nwithMeta(imageBlockSchema.node, {\n  displayName: 'NodeSchema<image-block>',\n  group: 'ImageBlock',\n})\n","import type { Node } from '@milkdown/transformer'\nimport { visit } from 'unist-util-visit'\nimport { $remark } from '@milkdown/utils'\nimport { withMeta } from '../__internal__/meta'\n\nfunction visitImage(ast: Node) {\n  return visit(\n    ast,\n    'paragraph',\n    (\n      node: Node & { children?: Node[] },\n      index: number,\n      parent: Node & { children: Node[] }\n    ) => {\n      if (node.children?.length !== 1) return\n      const firstChild = node.children?.[0]\n      if (!firstChild || firstChild.type !== 'image') return\n\n      const { url, alt, title } = firstChild as Node & {\n        url: string\n        alt: string\n        title: string\n      }\n      const newNode = {\n        type: 'image-block',\n        url,\n        alt,\n        title,\n      }\n\n      parent.children.splice(index, 1, newNode)\n    }\n  )\n}\n\nexport const remarkImageBlockPlugin = $remark(\n  'remark-image-block',\n  () => () => visitImage\n)\n\nwithMeta(remarkImageBlockPlugin.plugin, {\n  displayName: 'Remark<remarkImageBlock>',\n  group: 'ImageBlock',\n})\n\nwithMeta(remarkImageBlockPlugin.options, {\n  displayName: 'RemarkConfig<remarkImageBlock>',\n  group: 'ImageBlock',\n})\n","import { $ctx } from '@milkdown/utils'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\nexport interface ImageBlockConfig {\n  imageIcon: () => ReturnType<typeof html> | string | HTMLElement\n  captionIcon: () => ReturnType<typeof html> | string | HTMLElement\n  uploadButton: () => ReturnType<typeof html> | string | HTMLElement\n  confirmButton: () => ReturnType<typeof html> | string | HTMLElement\n  uploadPlaceholderText: string\n  captionPlaceholderText: string\n  onUpload: (file: File) => Promise<string>\n  proxyDomURL?: (url: string) => Promise<string> | string\n}\n\nexport const defaultImageBlockConfig: ImageBlockConfig = {\n  imageIcon: () => '🌌',\n  captionIcon: () => '💬',\n  uploadButton: () => html`Upload file`,\n  confirmButton: () => html`Confirm ⏎`,\n  uploadPlaceholderText: 'or paste the image link ...',\n  captionPlaceholderText: 'Image caption',\n  onUpload: (file) => Promise.resolve(URL.createObjectURL(file)),\n}\n\nexport const imageBlockConfig = $ctx(\n  defaultImageBlockConfig,\n  'imageBlockConfigCtx'\n)\n\nwithMeta(imageBlockConfig, {\n  displayName: 'Config<image-block>',\n  group: 'ImageBlock',\n})\n","import type { Component } from 'atomico'\nimport { c, html, useEffect, useRef, useState } from 'atomico'\nimport { customAlphabet } from 'nanoid'\nimport clsx from 'clsx'\nimport type { ImageBlockConfig } from '../config'\nimport { IMAGE_DATA_TYPE } from '../schema'\nimport { useBlockEffect } from './event'\n\nexport interface Attrs {\n  src: string\n  caption: string\n  ratio: number\n}\n\nexport type ImageComponentProps = Attrs & {\n  config: ImageBlockConfig\n  selected: boolean\n  readonly: boolean\n  setAttr: <T extends keyof Attrs>(attr: T, value: Attrs[T]) => void\n}\n\nlet timer: number = 0\n\nconst nanoid = customAlphabet('abcdefg', 8)\n\nexport const imageComponent: Component<ImageComponentProps> = ({\n  src = '',\n  caption = '',\n  ratio = 1,\n  selected = false,\n  readonly = false,\n  setAttr,\n  config,\n}) => {\n  const image = useRef<HTMLImageElement>()\n  const resizeHandle = useRef<HTMLDivElement>()\n  const linkInput = useRef<HTMLInputElement>()\n  const [showCaption, setShowCaption] = useState(caption.length > 0)\n  const [hidePlaceholder, setHidePlaceholder] = useState(src.length !== 0)\n  const [uuid] = useState(nanoid())\n  const [focusLinkInput, setFocusLinkInput] = useState(false)\n  const [currentLink, setCurrentLink] = useState(src)\n\n  useBlockEffect({\n    image,\n    resizeHandle,\n    ratio,\n    setRatio: (r) => setAttr?.('ratio', r),\n    src,\n    readonly,\n  })\n\n  useEffect(() => {\n    if (selected) return\n\n    setShowCaption(caption.length > 0)\n  }, [selected])\n\n  const onInput = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    if (timer) window.clearTimeout(timer)\n\n    timer = window.setTimeout(() => {\n      setAttr?.('caption', value)\n    }, 1000)\n  }\n\n  const onBlurCaption = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    if (timer) {\n      window.clearTimeout(timer)\n      timer = 0\n    }\n\n    setAttr?.('caption', value)\n  }\n\n  const onEditLink = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    setHidePlaceholder(value.length !== 0)\n    setCurrentLink(value)\n  }\n\n  const onUpload = async (e: InputEvent) => {\n    const file = (e.target as HTMLInputElement).files?.[0]\n    if (!file) return\n\n    const url = await config?.onUpload(file)\n    if (!url) return\n\n    setAttr?.('src', url)\n    setHidePlaceholder(true)\n  }\n\n  const onToggleCaption = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (readonly) return\n    setShowCaption((x) => !x)\n  }\n\n  const onConfirmLinkInput = () => {\n    setAttr?.('src', linkInput.current?.value ?? '')\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Enter') onConfirmLinkInput()\n  }\n\n  const preventDrag = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  return html`<host class=${clsx(selected && 'selected')}>\n    <div class=${clsx('image-edit', src.length > 0 && 'hidden')}>\n      <div class=\"image-icon\">${config?.imageIcon()}</div>\n      <div class=${clsx('link-importer', focusLinkInput && 'focus')}>\n        <input\n          ref=${linkInput}\n          draggable=\"true\"\n          ondragstart=${preventDrag}\n          disabled=${readonly}\n          class=\"link-input-area\"\n          value=${currentLink}\n          oninput=${onEditLink}\n          onkeydown=${onKeydown}\n          onfocus=${() => setFocusLinkInput(true)}\n          onblur=${() => setFocusLinkInput(false)}\n        />\n        <div class=${clsx('placeholder', hidePlaceholder && 'hidden')}>\n          <input\n            disabled=${readonly}\n            class=\"hidden\"\n            id=${uuid}\n            type=\"file\"\n            accept=\"image/*\"\n            onchange=${onUpload}\n          />\n          <label class=\"uploader\" for=${uuid}>\n            ${config?.uploadButton()}\n          </label>\n          <span class=\"text\" onclick=${() => linkInput.current?.focus()}>\n            ${config?.uploadPlaceholderText}\n          </span>\n        </div>\n      </div>\n      <div\n        class=${clsx('confirm', currentLink.length === 0 && 'hidden')}\n        onclick=${() => onConfirmLinkInput()}\n      >\n        ${config?.confirmButton()}\n      </div>\n    </div>\n    <div class=${clsx('image-wrapper', src.length === 0 && 'hidden')}>\n      <div class=\"operation\">\n        <div class=\"operation-item\" onpointerdown=${onToggleCaption}>\n          ${config?.captionIcon()}\n        </div>\n      </div>\n      <img\n        ref=${image}\n        data-type=${IMAGE_DATA_TYPE}\n        src=${src}\n        alt=${caption}\n        ratio=${ratio}\n      />\n      <div ref=${resizeHandle} class=\"image-resize-handle\"></div>\n    </div>\n    <input\n      draggable=\"true\"\n      ondragstart=${preventDrag}\n      class=${clsx('caption-input', !showCaption && 'hidden')}\n      placeholder=${config?.captionPlaceholderText}\n      oninput=${onInput}\n      onblur=${onBlurCaption}\n      value=${caption}\n    />\n  </host>`\n}\n\nimageComponent.props = {\n  src: String,\n  caption: String,\n  ratio: Number,\n  selected: Boolean,\n  readonly: Boolean,\n  setAttr: Function,\n  config: Object,\n}\n\nexport const ImageElement = c(imageComponent)\n","import { type Ref, useEffect, useHost, useMemo } from 'atomico'\n\ninterface Options {\n  image: Ref<HTMLImageElement>\n  resizeHandle: Ref<HTMLDivElement>\n  ratio: number\n  setRatio: (ratio: number) => void\n  src: string\n  readonly: boolean\n}\n\nexport function useBlockEffect({\n  image,\n  resizeHandle,\n  ratio,\n  setRatio,\n  src,\n  readonly,\n}: Options) {\n  const host = useHost()\n  const root = useMemo(() => host.current.getRootNode() as HTMLElement, [host])\n\n  useEffect(() => {\n    const imageRef = image.current\n    if (!imageRef) return\n\n    delete imageRef.dataset.origin\n    delete imageRef.dataset.height\n    imageRef.style.height = ''\n  }, [src])\n\n  useEffect(() => {\n    const resizeHandleRef = resizeHandle.current\n    const imageRef = image.current\n    if (!resizeHandleRef || !imageRef) return\n    const onMove = (e: PointerEvent) => {\n      e.preventDefault()\n      const top = imageRef.getBoundingClientRect().top\n      const height = e.clientY - top\n      const h = Number(height < 100 ? 100 : height).toFixed(2)\n      imageRef.dataset.height = h\n      imageRef.style.height = `${h}px`\n    }\n    const pointerUp = () => {\n      root.removeEventListener('pointermove', onMove)\n      root.removeEventListener('pointerup', pointerUp)\n      const originHeight = Number(imageRef.dataset.origin)\n      const currentHeight = Number(imageRef.dataset.height)\n      const ratio = Number.parseFloat(\n        Number(currentHeight / originHeight).toFixed(2)\n      )\n      if (Number.isNaN(ratio)) return\n\n      setRatio(ratio)\n    }\n\n    const pointerDown = (e: PointerEvent) => {\n      if (readonly) return\n      e.preventDefault()\n      root.addEventListener('pointermove', onMove)\n      root.addEventListener('pointerup', pointerUp)\n    }\n\n    const onLoad = (e: Event) => {\n      const maxWidth = host.current.getBoundingClientRect().width\n      if (!maxWidth) return\n\n      const target = e.target as HTMLImageElement\n      const height = target.height\n      const width = target.width\n      const transformedHeight =\n        width < maxWidth ? height : maxWidth * (height / width)\n      const h = (transformedHeight * ratio).toFixed(2)\n      imageRef.dataset.origin = transformedHeight.toFixed(2)\n      imageRef.dataset.height = h\n      imageRef.style.height = `${h}px`\n    }\n\n    imageRef.addEventListener('load', onLoad)\n    resizeHandleRef.addEventListener('pointerdown', pointerDown)\n    return () => {\n      imageRef.removeEventListener('load', onLoad)\n      resizeHandleRef.removeEventListener('pointerdown', pointerDown)\n    }\n  }, [])\n}\n","export function defIfNotExists(\n  tagName: string,\n  element: CustomElementConstructor\n) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element) return\n\n  // eslint-disable-next-line no-console\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n","import { $view } from '@milkdown/utils'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport type { Node } from '@milkdown/prose/model'\nimport { imageBlockSchema } from '../schema'\nimport { imageBlockConfig } from '../config'\nimport { withMeta } from '../../__internal__/meta'\nimport { defIfNotExists } from '../../__internal__/helper'\nimport type { ImageComponentProps } from './component'\nimport { ImageElement } from './component'\n\ndefIfNotExists('milkdown-image-block', ImageElement)\nexport const imageBlockView = $view(\n  imageBlockSchema.node,\n  (ctx): NodeViewConstructor => {\n    return (initialNode, view, getPos) => {\n      const dom = document.createElement(\n        'milkdown-image-block'\n      ) as HTMLElement & ImageComponentProps\n      const config = ctx.get(imageBlockConfig.key)\n      const proxyDomURL = config.proxyDomURL\n      const bindAttrs = (node: Node) => {\n        if (!proxyDomURL) {\n          dom.src = node.attrs.src\n        } else {\n          const proxiedURL = proxyDomURL(node.attrs.src)\n          if (typeof proxiedURL === 'string') {\n            dom.src = proxiedURL\n          } else {\n            proxiedURL.then((url) => {\n              dom.src = url\n            })\n          }\n        }\n        dom.ratio = node.attrs.ratio\n        dom.caption = node.attrs.caption\n\n        dom.readonly = !view.editable\n      }\n\n      bindAttrs(initialNode)\n      dom.selected = false\n      dom.setAttr = (attr, value) => {\n        const pos = getPos()\n        if (pos == null) return\n\n        view.dispatch(view.state.tr.setNodeAttribute(pos, attr, value))\n      }\n      dom.config = config\n      return {\n        dom,\n        update: (updatedNode) => {\n          if (updatedNode.type !== initialNode.type) return false\n\n          bindAttrs(updatedNode)\n          return true\n        },\n        stopEvent: (e) => {\n          if (e.target instanceof HTMLInputElement) return true\n\n          return false\n        },\n        selectNode: () => {\n          dom.selected = true\n        },\n        deselectNode: () => {\n          dom.selected = false\n        },\n        destroy: () => {\n          dom.remove()\n        },\n      }\n    }\n  }\n)\n\nwithMeta(imageBlockView, {\n  displayName: 'NodeView<image-block>',\n  group: 'ImageBlock',\n})\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { imageBlockSchema } from './schema'\nimport { remarkImageBlockPlugin } from './remark-plugin'\nimport { imageBlockView } from './view'\nimport { imageBlockConfig } from './config'\n\nexport * from './schema'\nexport * from './remark-plugin'\nexport * from './config'\nexport * from './view'\n\nexport const imageBlockComponent: MilkdownPlugin[] = [\n  remarkImageBlockPlugin,\n  imageBlockSchema,\n  imageBlockView,\n  imageBlockConfig,\n].flat()\n","import { $ctx } from '@milkdown/utils'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\nexport interface InlineImageConfig {\n  imageIcon: () => ReturnType<typeof html>\n  uploadButton: () => ReturnType<typeof html>\n  confirmButton: () => ReturnType<typeof html>\n  uploadPlaceholderText: string\n  onUpload: (file: File) => Promise<string>\n  proxyDomURL?: (url: string) => Promise<string> | string\n}\n\nexport const defaultInlineImageConfig: InlineImageConfig = {\n  imageIcon: () => '🌌',\n  uploadButton: () => html`Upload`,\n  confirmButton: () => html`⏎`,\n  uploadPlaceholderText: '/Paste',\n  onUpload: (file) => Promise.resolve(URL.createObjectURL(file)),\n}\n\nexport const inlineImageConfig = $ctx(\n  defaultInlineImageConfig,\n  'inlineImageConfigCtx'\n)\n\nwithMeta(inlineImageConfig, {\n  displayName: 'Config<image-inline>',\n  group: 'ImageInline',\n})\n","import { c, html, useRef, useState } from 'atomico'\nimport type { Component } from 'atomico'\nimport { customAlphabet } from 'nanoid'\nimport clsx from 'clsx'\nimport type { InlineImageConfig } from './config'\n\nexport interface Attrs {\n  src: string\n  alt: string\n  title: string\n}\n\nexport type InlineImageComponentProps = Attrs & {\n  setAttr: <T extends keyof Attrs>(attr: T, value: Attrs[T]) => void\n  selected: boolean\n  config: InlineImageConfig\n}\n\nconst nanoid = customAlphabet('abcdefg', 8)\n\nexport const inlineImageComponent: Component<InlineImageComponentProps> = ({\n  src = '',\n  selected = false,\n  alt,\n  title,\n  setAttr,\n  config,\n}) => {\n  const linkInput = useRef<HTMLInputElement>()\n  const [uuid] = useState(nanoid())\n  const [focusLinkInput, setFocusLinkInput] = useState(false)\n  const [hidePlaceholder, setHidePlaceholder] = useState(src.length !== 0)\n  const [currentLink, setCurrentLink] = useState(src)\n\n  const onEditLink = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    setHidePlaceholder(value.length !== 0)\n    setCurrentLink(value)\n  }\n\n  const onUpload = async (e: InputEvent) => {\n    const file = (e.target as HTMLInputElement).files?.[0]\n    if (!file) return\n\n    const url = await config?.onUpload(file)\n    if (!url) return\n\n    setAttr?.('src', url)\n    setHidePlaceholder(true)\n  }\n\n  const onConfirmLinkInput = () => {\n    setAttr?.('src', linkInput.current?.value ?? '')\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Enter') onConfirmLinkInput()\n  }\n\n  const preventDrag = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  return html`<host class=${clsx(selected && 'selected', !src && 'empty')}>\n    ${!src\n      ? html`<div class=\"empty-image-inline\">\n          <div class=\"image-icon\">${config?.imageIcon()}</div>\n          <div class=${clsx('link-importer', focusLinkInput && 'focus')}>\n            <input\n              draggable=\"true\"\n              ref=${linkInput}\n              ondragstart=${preventDrag}\n              class=\"link-input-area\"\n              value=${currentLink}\n              oninput=${onEditLink}\n              onkeydown=${onKeydown}\n              onfocus=${() => setFocusLinkInput(true)}\n              onblur=${() => setFocusLinkInput(false)}\n            />\n            <div class=${clsx('placeholder', hidePlaceholder && 'hidden')}>\n              <input\n                class=\"hidden\"\n                id=${uuid}\n                type=\"file\"\n                accept=\"image/*\"\n                onchange=${onUpload}\n              />\n              <label class=\"uploader\" for=${uuid}>\n                ${config?.uploadButton()}\n              </label>\n              <span class=\"text\" onclick=${() => linkInput.current?.focus()}>\n                ${config?.uploadPlaceholderText}\n              </span>\n            </div>\n          </div>\n          <div\n            class=${clsx('confirm', currentLink.length === 0 && 'hidden')}\n            onclick=${() => onConfirmLinkInput()}\n          >\n            ${config?.confirmButton()}\n          </div>\n        </div>`\n      : html`<img class=\"image-inline\" src=${src} alt=${alt} title=${title} />`}\n  </host>`\n}\n\ninlineImageComponent.props = {\n  src: String,\n  alt: String,\n  title: String,\n  selected: Boolean,\n  setAttr: Function,\n  config: Object,\n}\n\nexport const InlineImageElement = c(inlineImageComponent)\n","import { $view } from '@milkdown/utils'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport { imageSchema } from '@milkdown/preset-commonmark'\nimport type { Node } from '@milkdown/prose/model'\nimport { withMeta } from '../__internal__/meta'\nimport { defIfNotExists } from '../__internal__/helper'\nimport type { InlineImageComponentProps } from './component'\nimport { InlineImageElement } from './component'\nimport { inlineImageConfig } from './config'\n\ndefIfNotExists('milkdown-image-inline', InlineImageElement)\nexport const inlineImageView = $view(\n  imageSchema.node,\n  (ctx): NodeViewConstructor => {\n    return (initialNode, view, getPos) => {\n      const dom = document.createElement(\n        'milkdown-image-inline'\n      ) as HTMLElement & InlineImageComponentProps\n      const config = ctx.get(inlineImageConfig.key)\n      const proxyDomURL = config.proxyDomURL\n      const bindAttrs = (node: Node) => {\n        if (!proxyDomURL) {\n          dom.src = node.attrs.src\n        } else {\n          const proxiedURL = proxyDomURL(node.attrs.src)\n          if (typeof proxiedURL === 'string') {\n            dom.src = proxiedURL\n          } else {\n            proxiedURL.then((url) => {\n              dom.src = url\n            })\n          }\n        }\n        dom.alt = node.attrs.alt\n        dom.title = node.attrs.title\n      }\n      bindAttrs(initialNode)\n      dom.selected = false\n      dom.setAttr = (attr, value) => {\n        const pos = getPos()\n        if (pos == null) return\n\n        view.dispatch(view.state.tr.setNodeAttribute(pos, attr, value))\n      }\n      dom.config = config\n      return {\n        dom,\n        update: (updatedNode) => {\n          if (updatedNode.type !== initialNode.type) return false\n\n          bindAttrs(updatedNode)\n          return true\n        },\n        stopEvent: (e) => {\n          if (dom.selected && e.target instanceof HTMLInputElement) return true\n\n          return false\n        },\n        selectNode: () => {\n          dom.selected = true\n        },\n        deselectNode: () => {\n          dom.selected = false\n        },\n        destroy: () => {\n          dom.remove()\n        },\n      }\n    }\n  }\n)\n\nwithMeta(inlineImageView, {\n  displayName: 'NodeView<image-inline>',\n  group: 'ImageInline',\n})\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { inlineImageConfig } from './config'\nimport { inlineImageView } from './view'\n\nexport * from './config'\nexport * from './view'\n\nexport const imageInlineComponent: MilkdownPlugin[] = [\n  inlineImageConfig,\n  inlineImageView,\n]\n","import {\n  imageBlockComponent,\n  imageBlockConfig,\n} from '@milkdown/kit/component/image-block'\nimport {\n  imageInlineComponent,\n  inlineImageConfig,\n} from '@milkdown/kit/component/image-inline'\nimport type { DefineFeature, Icon } from '../shared'\nimport { captionIcon, confirmIcon, imageIcon } from '../../icons'\n\ninterface ImageBlockConfig {\n  onUpload: (file: File) => Promise<string>\n  proxyDomURL: (url: string) => Promise<string> | string\n\n  inlineImageIcon: Icon\n  inlineConfirmButton: Icon\n  inlineUploadButton: Icon\n  inlineUploadPlaceholderText: string\n  inlineOnUpload: (file: File) => Promise<string>\n\n  blockImageIcon: Icon\n  blockConfirmButton: Icon\n  blockCaptionIcon: Icon\n  blockUploadButton: Icon\n  blockCaptionPlaceholderText: string\n  blockUploadPlaceholderText: string\n  blockOnUpload: (file: File) => Promise<string>\n}\n\nexport type ImageBlockFeatureConfig = Partial<ImageBlockConfig>\n\nexport const defineFeature: DefineFeature<ImageBlockFeatureConfig> = (\n  editor,\n  config\n) => {\n  editor\n    .config((ctx) => {\n      ctx.update(inlineImageConfig.key, (value) => ({\n        uploadButton: config?.inlineUploadButton ?? (() => 'Upload'),\n        imageIcon: config?.inlineImageIcon ?? (() => imageIcon),\n        confirmButton: config?.inlineConfirmButton ?? (() => confirmIcon),\n        uploadPlaceholderText:\n          config?.inlineUploadPlaceholderText ?? 'or paste link',\n        onUpload: config?.inlineOnUpload ?? config?.onUpload ?? value.onUpload,\n        proxyDomURL: config?.proxyDomURL,\n      }))\n      ctx.update(imageBlockConfig.key, (value) => ({\n        uploadButton: config?.blockUploadButton ?? (() => 'Upload file'),\n        imageIcon: config?.blockImageIcon ?? (() => imageIcon),\n        captionIcon: config?.blockCaptionIcon ?? (() => captionIcon),\n        confirmButton: config?.blockConfirmButton ?? (() => 'Confirm'),\n        captionPlaceholderText:\n          config?.blockCaptionPlaceholderText ?? 'Write Image Caption',\n        uploadPlaceholderText:\n          config?.blockUploadPlaceholderText ?? 'or paste link',\n        onUpload: config?.blockOnUpload ?? config?.onUpload ?? value.onUpload,\n        proxyDomURL: config?.proxyDomURL,\n      }))\n    })\n    .use(imageBlockComponent)\n    .use(imageInlineComponent)\n}\n"],"names":["withMeta","plugin","meta","Object","assign","__spreadValues$1","package","IMAGE_DATA_TYPE","imageBlockSchema","$nodeSchema","inline","group","selectable","draggable","isolating","marks","atom","priority","attrs","src","default","caption","ratio","parseDOM","tag","getAttrs","dom","_a","HTMLElement","expectDomTypeError","getAttribute","Number","toDOM","node","__spreadValues","parseMarkdown","match","_ref","type","runner","state","url","title","alt","isNaN","addNode","toMarkdown","name","openNode","parseFloat","toFixed","closeNode","visitImage","ast","visit","index","parent","_b","children","length","firstChild","newNode","splice","displayName","remarkImageBlockPlugin","$remark","options","defaultImageBlockConfig","imageIcon","captionIcon","uploadButton","html","confirmButton","uploadPlaceholderText","captionPlaceholderText","onUpload","file","Promise","resolve","URL","createObjectURL","imageBlockConfig","$ctx","timer","nanoid","customAlphabet","imageComponent","_ref3","selected","readonly","setAttr","config","image","useRef","resizeHandle","linkInput","showCaption","setShowCaption","useState","hidePlaceholder","setHidePlaceholder","uuid","focusLinkInput","setFocusLinkInput","currentLink","setCurrentLink","_ref2","setRatio","host","useHost","root","useMemo","current","getRootNode","useEffect","imageRef","dataset","origin","height","style","resizeHandleRef","onMove","e","preventDefault","top","getBoundingClientRect","clientY","h","pointerUp","removeEventListener","originHeight","currentHeight","ratio2","pointerDown","addEventListener","onLoad","maxWidth","width","target","transformedHeight","useBlockEffect","r","onConfirmLinkInput","value","preventDrag","stopPropagation","clsx","key","__async","files","focus","x","window","clearTimeout","setTimeout","props","String","Boolean","Function","tagName","element","customElements","get","console","warn","define","defIfNotExists","c","imageBlockView","$view","ctx","initialNode","view","getPos","document","createElement","proxyDomURL","bindAttrs","proxiedURL","then","editable","attr","pos","dispatch","tr","setNodeAttribute","update","updatedNode","stopEvent","HTMLInputElement","selectNode","deselectNode","destroy","remove","imageBlockComponent","flat","defaultInlineImageConfig","inlineImageConfig","inlineImageComponent","inlineImageView","imageSchema","imageInlineComponent","defineFeature","editor","_c","_d","_e","_f","inlineUploadButton","inlineImageIcon","inlineConfirmButton","confirmIcon","inlineUploadPlaceholderText","inlineOnUpload","_g","_h","blockUploadButton","blockImageIcon","blockCaptionIcon","blockConfirmButton","blockCaptionPlaceholderText","blockUploadPlaceholderText","blockOnUpload","use"],"sourceRoot":""}