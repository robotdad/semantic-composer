{"version":3,"file":"static/js/1320.a0c935e1.chunk.js","mappings":"wMA0CO,MAAMA,GAAoBC,EAAAA,EAAAA,IAC/B,CACEC,KAAM,kBACNC,KAAM,SAER,wBAGWC,GAAoBC,EAAAA,EAAAA,KAAQC,GAChC,IAAIC,EAAAA,GAAO,CAChBC,IAAK,IAAIC,EAAAA,GAAU,qBACnBC,MAAO,CACLC,YAAcC,IAtDpB,IAAAC,EAuDQ,MAAMC,EAASR,EAAIS,IAAIf,EAAkBQ,KACrC,GAAgB,QAAhBM,EAAOX,OA/CnB,SAAoBa,GATpB,IAAAH,EAUE,OAAOG,EAAIC,YAAc,KAAM,OAAAJ,EAAIG,EAAAE,iBAAJ,EAAAL,EAAgBM,QAAQC,KACzD,CA6CsCC,CAAWT,EAAMI,KAAa,YAE5D,IAAIM,EAAAA,EAAAA,GAAcV,EAAMW,aAAcC,EAAAA,EAAAA,GAASZ,EAAMW,WAC5C,YAEH,MACAE,EAjDd,SACEb,EACAc,GAEM,gBAAEH,GAAcX,EAClB,IAACW,EAAUI,MAAc,YAE7B,MAAMC,EAAOL,EAAUM,QACjBC,EAAOF,EAAKG,OAClB,GAAID,EAAKX,QAAQC,KAAO,EAAU,YAGlC,IADgBY,EAAAA,EAAAA,KAAYC,GAA4B,UAAnBA,EAAKC,KAAKC,MAA/BH,CAAiDJ,GAC7C,YAEd,MAAAQ,EAASR,EAAKQ,SAEpB,OAAOC,EAAAA,GAAWP,KAAKM,EAAQA,EAASN,EAAKQ,SAAU,CACrDC,MAAO,oBACP,mBAAoBb,GAExB,CA6BqBc,CAA4B5B,EADjB,OAAAC,EAAOC,EAAAZ,MAAQW,EAAA,mBAEnC,OAACY,EAEEgB,EAAAA,GAAcC,OAAO9B,EAAMI,IAAK,CAACS,IAFtB,IAE4B,OAMzCkB,EAAyDA,CACpEC,EACA9B,KAGG8B,EAAA9B,QAAQR,IACHQ,GACFR,EAAIuC,OAAO7C,EAAkBQ,KAAMsC,IAC1B,IACFA,KACAhC,KAEN,IAGJiC,IAAI3C,GACJ2C,IAAI/C,EAAkB,C,iBCrFpB,SAASsB,EAAcC,GAE5B,MAAqB,eADRA,EAAUyB,MAAMjB,OAAOG,KACxBC,IACd,CAEO,SAASX,EAASD,GAPzB,IAAAV,EAQQ,MAAAqB,EAAO,OAAArB,EAAAU,EAAUyB,MAAMlB,KAAKP,EAAUyB,MAAMC,MAAQ,SAAI,EAAApC,EAAAqB,KAC9D,MAAsB,eAAf,MAAAA,OAAA,EAAAA,EAAMC,KACf,CAEgB,SAAAe,EACdC,EACAC,GAEmC,MAA/BC,eAAetC,IAAIoC,IACNE,eAAAC,OAAOH,EAASC,EACnC,C","sources":["../node_modules/@milkdown/crepe/src/feature/placeholder/index.ts","../node_modules/@milkdown/crepe/src/utils/index.ts"],"sourcesContent":["import { $ctx, $prose } from '@milkdown/kit/utils'\nimport type { EditorState } from '@milkdown/kit/prose/state'\nimport { Plugin, PluginKey } from '@milkdown/kit/prose/state'\nimport type { Node } from '@milkdown/kit/prose/model'\nimport { Decoration, DecorationSet } from '@milkdown/kit/prose/view'\nimport { findParent } from '@milkdown/kit/prose'\nimport type { DefineFeature } from '../shared'\nimport { isInCodeBlock, isInList } from '../../utils'\n\nfunction isDocEmpty(doc: Node) {\n  return doc.childCount <= 1 && !doc.firstChild?.content.size\n}\n\nfunction createPlaceholderDecoration(\n  state: EditorState,\n  placeholderText: string\n): Decoration | null {\n  const { selection } = state\n  if (!selection.empty) return null\n\n  const $pos = selection.$anchor\n  const node = $pos.parent\n  if (node.content.size > 0) return null\n\n  const inTable = findParent((node) => node.type.name === 'table')($pos)\n  if (inTable) return null\n\n  const before = $pos.before()\n\n  return Decoration.node(before, before + node.nodeSize, {\n    class: 'crepe-placeholder',\n    'data-placeholder': placeholderText,\n  })\n}\n\ninterface PlaceholderConfig {\n  text: string\n  mode: 'doc' | 'block'\n}\n\nexport type PlaceHolderFeatureConfig = Partial<PlaceholderConfig>\n\nexport const placeholderConfig = $ctx(\n  {\n    text: 'Please enter...',\n    mode: 'block',\n  } as PlaceholderConfig,\n  'placeholderConfigCtx'\n)\n\nexport const placeholderPlugin = $prose((ctx) => {\n  return new Plugin({\n    key: new PluginKey('CREPE_PLACEHOLDER'),\n    props: {\n      decorations: (state) => {\n        const config = ctx.get(placeholderConfig.key)\n        if (config.mode === 'doc' && !isDocEmpty(state.doc)) return null\n\n        if (isInCodeBlock(state.selection) || isInList(state.selection))\n          return null\n\n        const placeholderText = config.text ?? 'Please enter...'\n        const deco = createPlaceholderDecoration(state, placeholderText)\n        if (!deco) return null\n\n        return DecorationSet.create(state.doc, [deco])\n      },\n    },\n  })\n})\n\nexport const defineFeature: DefineFeature<PlaceHolderFeatureConfig> = (\n  editor,\n  config\n) => {\n  editor\n    .config((ctx) => {\n      if (config) {\n        ctx.update(placeholderConfig.key, (prev) => {\n          return {\n            ...prev,\n            ...config,\n          }\n        })\n      }\n    })\n    .use(placeholderPlugin)\n    .use(placeholderConfig)\n}\n","import type { Selection } from '@milkdown/kit/prose/state'\n\nexport function isInCodeBlock(selection: Selection) {\n  const type = selection.$from.parent.type\n  return type.name === 'code_block'\n}\n\nexport function isInList(selection: Selection) {\n  const type = selection.$from.node(selection.$from.depth - 1)?.type\n  return type?.name === 'list_item'\n}\n\nexport function defIfNotExists(\n  tagName: string,\n  element: CustomElementConstructor\n) {\n  if (customElements.get(tagName) == null)\n    customElements.define(tagName, element)\n}\n"],"names":["placeholderConfig","$ctx","text","mode","placeholderPlugin","$prose","ctx","Plugin","key","PluginKey","props","decorations","state","_a","config","get","doc","childCount","firstChild","content","size","isDocEmpty","isInCodeBlock","selection","isInList","deco","placeholderText","empty","$pos","$anchor","node","parent","findParent","node2","type","name","before","Decoration","nodeSize","class","createPlaceholderDecoration","DecorationSet","create","defineFeature","editor","update","prev","use","$from","depth","defIfNotExists","tagName","element","customElements","define"],"sourceRoot":""}